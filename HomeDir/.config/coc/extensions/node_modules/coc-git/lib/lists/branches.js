"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const safe_1 = tslib_1.__importDefault(require("colors/safe"));
const util_1 = require("../util");
class Branches {
    constructor(nvim, manager) {
        this.nvim = nvim;
        this.manager = manager;
        this.name = 'branches';
        this.description = 'git branches';
        this.defaultAction = 'checkout';
        this.actions = [];
        this.actions.push({
            name: 'checkout',
            execute: (item) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                let { root, branch } = item.data;
                yield util_1.runCommand(`git checkout ${branch}`, { cwd: root });
                yield nvim.command('bufdo e');
            })
        });
        this.actions.push({
            name: 'delete',
            persist: true,
            reload: true,
            execute: (item) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                let cmd;
                let { root, branch, remote } = item.data;
                if (remote) {
                    let res = yield coc_nvim_1.workspace.showPrompt(`Delete remote branch ${branch}?`);
                    if (!res)
                        return;
                    let parts = branch.split('/', 2);
                    cmd = `git push ${parts[0]} --delete ${parts[1]}`;
                    yield util_1.runCommand(cmd, { cwd: root });
                    yield util_1.runCommand(`git fetch -p ${parts[0]}`);
                }
                else {
                    cmd = `git branch -d ${branch}`;
                    try {
                        yield util_1.runCommand(cmd, { cwd: root });
                    }
                    catch (e) {
                        let res = yield coc_nvim_1.workspace.showPrompt(`Delete failed, force delete ${branch}?`);
                        if (!res)
                            return;
                        yield util_1.runCommand(`git branch -D ${branch}`, { cwd: root });
                    }
                }
            })
        });
        this.actions.push({
            name: 'merge',
            execute: (item) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                let { root, branch } = item.data;
                let cmd = `git merge ${branch}`;
                yield util_1.runCommand(cmd, { cwd: root });
                yield nvim.command('bufdo e');
            })
        });
        this.actions.push({
            name: 'rebase',
            execute: (item) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                let { root, branch } = item.data;
                let cmd = `git rebase ${branch}`;
                yield util_1.runCommand(cmd, { cwd: root });
                yield nvim.command('bufdo e');
            })
        });
    }
    loadItems(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let res = [];
            let buf = yield context.window.buffer;
            let root = yield this.manager.resolveGitRoot(buf.id);
            if (!root) {
                throw new Error(`Can't resolve git root.`);
                return;
            }
            let output = yield util_1.runCommand(`git branch --no-color -a ${context.args.join(' ')}`, { cwd: root });
            output = output.replace(/\s+$/, '');
            for (let line of output.split(/\r?\n/)) {
                let remote = line.slice(2).startsWith('remotes/');
                res.push({
                    label: safe_1.default.yellow(line.slice(0, 2)) + line.slice(2),
                    filterText: line.slice(2),
                    data: {
                        current: line[0] == '*',
                        root,
                        branch: remote ? line.slice(10) : line.slice(2),
                        remote
                    }
                });
            }
            return res;
        });
    }
}
exports.default = Branches;
//# sourceMappingURL=branches.js.map