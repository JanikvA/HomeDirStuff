"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = require("./util");
function gitBranch(cwd) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let res = yield util_1.safeRun('git symbolic-ref -q HEAD | cut -c 12-', { cwd });
        if (res == null)
            return '';
        res = res.trim();
        if (res)
            return res;
        res = yield util_1.safeRun('git rev-parse --short HEAD', { cwd });
        return `:${res.trim()}`;
    });
}
function gitChanged(cwd) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let res = yield util_1.safeRun('git diff --name-status | cut -c 1-2', { cwd });
        if (res == null)
            return 0;
        let out = res.replace(/\n$/, '');
        let count = 0;
        out.split('\n').forEach(line => {
            if (line.startsWith('M'))
                count++;
        });
        return count;
    });
}
function gitStaged(cwd) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let res = yield util_1.safeRun('git diff --staged --name-status | cut -c 1-2', { cwd });
        if (res == null)
            return [0, 0];
        let out = res.replace(/\n$/, '');
        let conflicted = 0;
        let staged = 0;
        out.split('\n').forEach(line => {
            if (!line.length)
                return;
            if (/U/.test(line)) {
                conflicted++;
            }
            else {
                staged++;
            }
        });
        return [conflicted, staged];
    });
}
function gitUntracked(cwd) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let res = yield util_1.safeRun('git ls-files --others --exclude-standard', { cwd });
        if (res == null)
            return 0;
        let out = res.trim();
        if (!out.length)
            return 0;
        return out.split('\n').length;
    });
}
function gitStatus(cwd, character, decorator) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let res = yield Promise.all([gitBranch(cwd), gitChanged(cwd), gitStaged(cwd), gitUntracked(cwd)]);
        if (!res[0])
            return '';
        let [branch, changed, staged, untracked] = res;
        let more = '';
        const { changedDecorator, conflictedDecorator, stagedDecorator, untrackedDecorator } = decorator;
        if (changed)
            more += changedDecorator;
        if (staged[0])
            more += conflictedDecorator;
        if (staged[1])
            more += stagedDecorator;
        if (untracked)
            more += untrackedDecorator;
        return `  ${character ? character + ' ' : ''}${branch}${more == '' ? ' ' : more + ' '}`;
    });
}
exports.gitStatus = gitStatus;
//# sourceMappingURL=status.js.map