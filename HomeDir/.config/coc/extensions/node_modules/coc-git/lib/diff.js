"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const util_1 = tslib_1.__importDefault(require("util"));
const util_2 = require("./util");
const uuid = require("uuid/v4");
const types_1 = require("./types");
function parseDiff(diffStr) {
    // split to lines and delete the first four lines and the last '\n'
    const allLines = diffStr.split('\n').slice(4, -1);
    const diffs = [];
    let diff = null;
    for (const line of allLines) {
        if (!line.startsWith('@@')) {
            if (diff) {
                diff.lines.push(line);
            }
            continue;
        }
        // Diff key: -xx +yy
        let diffKey = line.split('@@', 2)[1].trim();
        const [pres, nows] = diffKey
            .split(/\s+/)
            .map(str => str.slice(1).split(','));
        const deleteCount = parseInt(`${pres[1] || 1}`, 10);
        const addCount = parseInt(`${nows[1] || 1}`, 10);
        const lineNum = parseInt(nows[0], 10);
        // delete
        if (nows[1] === '0') {
            diff = {
                lines: [],
                head: line,
                start: lineNum,
                end: lineNum,
                changeType: types_1.ChangeType.Delete
            };
            diffs.push(diff);
        }
        else {
            if (deleteCount == 0) {
                diff = {
                    lines: [],
                    head: line,
                    start: lineNum,
                    end: lineNum + addCount - 1,
                    changeType: types_1.ChangeType.Add
                };
                diffs.push(diff);
            }
            else {
                diff = {
                    lines: [],
                    head: line,
                    start: lineNum,
                    end: lineNum + Math.min(addCount, deleteCount) - 1,
                    delta: [addCount, deleteCount],
                    changeType: types_1.ChangeType.Change
                };
                diffs.push(diff);
            }
        }
    }
    return diffs;
}
exports.parseDiff = parseDiff;
function getDiff(root, doc) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (doc.schema != 'file' || doc.buftype != '')
            return null;
        const stagedFile = path_1.default.join(os_1.default.tmpdir(), `coc-${uuid()}`);
        const currentFile = path_1.default.join(os_1.default.tmpdir(), `coc-${uuid()}`);
        let fsPath = coc_nvim_1.Uri.parse(doc.uri).fsPath;
        let file = path_1.default.relative(root, fsPath);
        let res = yield util_2.safeRun(`git --no-pager show :${file}`, { cwd: root });
        if (res == null)
            return null;
        let staged = res.replace(/\r?\n$/, '').split(/\r?\n/).join('\n');
        yield util_1.default.promisify(fs_1.default.writeFile)(stagedFile, staged + '\n', 'utf8');
        yield util_1.default.promisify(fs_1.default.writeFile)(currentFile, doc.getDocumentContent(), 'utf8');
        let output = yield util_2.getStdout(`git --no-pager diff -p -U0 --no-color ${stagedFile} ${currentFile}`);
        yield util_1.default.promisify(fs_1.default.unlink)(stagedFile);
        yield util_1.default.promisify(fs_1.default.unlink)(currentFile);
        if (!output)
            return null;
        return parseDiff(output);
    });
}
exports.getDiff = getDiff;
//# sourceMappingURL=diff.js.map